package org.putput.api.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Contact} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ContactAssert extends AbstractAssert<ContactAssert, Contact> {

  /**
   * Creates a new <code>{@link ContactAssert}</code> to make assertions on actual Contact.
   * @param actual the Contact we want to make assertions on.
   */
  public ContactAssert(Contact actual) {
    super(actual, ContactAssert.class);
  }

  /**
   * An entry point for ContactAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myContact)</code> and get specific assertion with code completion.
   * @param actual the Contact we want to make assertions on.
   * @return a new <code>{@link ContactAssert}</code>
   */
  public static ContactAssert assertThat(Contact actual) {
    return new ContactAssert(actual);
  }

  /**
   * Verifies that the actual Contact's additionalNames is equal to the given one.
   * @param additionalNames the given additionalNames to compare the actual Contact's additionalNames to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's additionalNames is not equal to the given one.
   */
  public ContactAssert hasAdditionalNames(String additionalNames) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected additionalNames of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAdditionalNames = actual.getAdditionalNames();
    if (!Objects.areEqual(actualAdditionalNames, additionalNames)) {
      failWithMessage(assertjErrorMessage, actual, additionalNames, actualAdditionalNames);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's additionalProperties is equal to the given one.
   * @param additionalProperties the given additionalProperties to compare the actual Contact's additionalProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's additionalProperties is not equal to the given one.
   */
  public ContactAssert hasAdditionalProperties(java.util.Map additionalProperties) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected additionalProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualAdditionalProperties = actual.getAdditionalProperties();
    if (!Objects.areEqual(actualAdditionalProperties, additionalProperties)) {
      failWithMessage(assertjErrorMessage, actual, additionalProperties, actualAdditionalProperties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's anniversary is equal to the given one.
   * @param anniversary the given anniversary to compare the actual Contact's anniversary to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's anniversary is not equal to the given one.
   */
  public ContactAssert hasAnniversary(Integer anniversary) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected anniversary of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualAnniversary = actual.getAnniversary();
    if (!Objects.areEqual(actualAnniversary, anniversary)) {
      failWithMessage(assertjErrorMessage, actual, anniversary, actualAnniversary);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's contactAddresses contains the given ContactAddress elements.
   * @param contactAddresses the given elements that should be contained in actual Contact's contactAddresses.
   * @return this assertion object.
   * @throws AssertionError if the actual Contact's contactAddresses does not contain all given ContactAddress elements.
   */
  public ContactAssert hasContactAddresses(ContactAddress... contactAddresses) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // check that given ContactAddress varargs is not null.
    if (contactAddresses == null) throw new AssertionError("Expecting contactAddresses parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getContactAddresses(), contactAddresses);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact has no contactAddresses.
   * @return this assertion object.
   * @throws AssertionError if the actual Contact's contactAddresses is not empty.
   */
  public ContactAssert hasNoContactAddresses() {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have contactAddresses but had :\n  <%s>";
    
    // check
    if (actual.getContactAddresses().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getContactAddresses());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Contact's dateOfBirth is equal to the given one.
   * @param dateOfBirth the given dateOfBirth to compare the actual Contact's dateOfBirth to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's dateOfBirth is not equal to the given one.
   */
  public ContactAssert hasDateOfBirth(Integer dateOfBirth) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected dateOfBirth of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualDateOfBirth = actual.getDateOfBirth();
    if (!Objects.areEqual(actualDateOfBirth, dateOfBirth)) {
      failWithMessage(assertjErrorMessage, actual, dateOfBirth, actualDateOfBirth);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's emails contains the given Email elements.
   * @param emails the given elements that should be contained in actual Contact's emails.
   * @return this assertion object.
   * @throws AssertionError if the actual Contact's emails does not contain all given Email elements.
   */
  public ContactAssert hasEmails(Email... emails) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // check that given Email varargs is not null.
    if (emails == null) throw new AssertionError("Expecting emails parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getEmails(), emails);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact has no emails.
   * @return this assertion object.
   * @throws AssertionError if the actual Contact's emails is not empty.
   */
  public ContactAssert hasNoEmails() {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have emails but had :\n  <%s>";
    
    // check
    if (actual.getEmails().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getEmails());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Contact's firstName is equal to the given one.
   * @param firstName the given firstName to compare the actual Contact's firstName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's firstName is not equal to the given one.
   */
  public ContactAssert hasFirstName(String firstName) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected firstName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFirstName = actual.getFirstName();
    if (!Objects.areEqual(actualFirstName, firstName)) {
      failWithMessage(assertjErrorMessage, actual, firstName, actualFirstName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's id is equal to the given one.
   * @param id the given id to compare the actual Contact's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's id is not equal to the given one.
   */
  public ContactAssert hasId(String id) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's internetIdentifiers contains the given InternetIdentifier elements.
   * @param internetIdentifiers the given elements that should be contained in actual Contact's internetIdentifiers.
   * @return this assertion object.
   * @throws AssertionError if the actual Contact's internetIdentifiers does not contain all given InternetIdentifier elements.
   */
  public ContactAssert hasInternetIdentifiers(InternetIdentifier... internetIdentifiers) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // check that given InternetIdentifier varargs is not null.
    if (internetIdentifiers == null) throw new AssertionError("Expecting internetIdentifiers parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getInternetIdentifiers(), internetIdentifiers);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact has no internetIdentifiers.
   * @return this assertion object.
   * @throws AssertionError if the actual Contact's internetIdentifiers is not empty.
   */
  public ContactAssert hasNoInternetIdentifiers() {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have internetIdentifiers but had :\n  <%s>";
    
    // check
    if (actual.getInternetIdentifiers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getInternetIdentifiers());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Contact's lastName is equal to the given one.
   * @param lastName the given lastName to compare the actual Contact's lastName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's lastName is not equal to the given one.
   */
  public ContactAssert hasLastName(String lastName) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected lastName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLastName = actual.getLastName();
    if (!Objects.areEqual(actualLastName, lastName)) {
      failWithMessage(assertjErrorMessage, actual, lastName, actualLastName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's links is equal to the given one.
   * @param links the given links to compare the actual Contact's links to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's links is not equal to the given one.
   */
  public ContactAssert hasLinks(ContactLinks links) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected links of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    ContactLinks actualLinks = actual.getLinks();
    if (!Objects.areEqual(actualLinks, links)) {
      failWithMessage(assertjErrorMessage, actual, links, actualLinks);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's notes is equal to the given one.
   * @param notes the given notes to compare the actual Contact's notes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's notes is not equal to the given one.
   */
  public ContactAssert hasNotes(String notes) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected notes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNotes = actual.getNotes();
    if (!Objects.areEqual(actualNotes, notes)) {
      failWithMessage(assertjErrorMessage, actual, notes, actualNotes);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's organisation is equal to the given one.
   * @param organisation the given organisation to compare the actual Contact's organisation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's organisation is not equal to the given one.
   */
  public ContactAssert hasOrganisation(String organisation) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected organisation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualOrganisation = actual.getOrganisation();
    if (!Objects.areEqual(actualOrganisation, organisation)) {
      failWithMessage(assertjErrorMessage, actual, organisation, actualOrganisation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's phoneNumbers contains the given PhoneNumber elements.
   * @param phoneNumbers the given elements that should be contained in actual Contact's phoneNumbers.
   * @return this assertion object.
   * @throws AssertionError if the actual Contact's phoneNumbers does not contain all given PhoneNumber elements.
   */
  public ContactAssert hasPhoneNumbers(PhoneNumber... phoneNumbers) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // check that given PhoneNumber varargs is not null.
    if (phoneNumbers == null) throw new AssertionError("Expecting phoneNumbers parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPhoneNumbers(), phoneNumbers);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact has no phoneNumbers.
   * @return this assertion object.
   * @throws AssertionError if the actual Contact's phoneNumbers is not empty.
   */
  public ContactAssert hasNoPhoneNumbers() {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have phoneNumbers but had :\n  <%s>";
    
    // check
    if (actual.getPhoneNumbers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPhoneNumbers());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Contact's salutation is equal to the given one.
   * @param salutation the given salutation to compare the actual Contact's salutation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's salutation is not equal to the given one.
   */
  public ContactAssert hasSalutation(String salutation) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected salutation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSalutation = actual.getSalutation();
    if (!Objects.areEqual(actualSalutation, salutation)) {
      failWithMessage(assertjErrorMessage, actual, salutation, actualSalutation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Contact's version is equal to the given one.
   * @param version the given version to compare the actual Contact's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Contact's version is not equal to the given one.
   */
  public ContactAssert hasVersion(Integer version) {
    // check that actual Contact we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualVersion = actual.getVersion();
    if (!Objects.areEqual(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

}
