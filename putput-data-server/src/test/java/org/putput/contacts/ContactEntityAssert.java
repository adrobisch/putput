package org.putput.contacts;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.putput.images.PutPutImage;

/**
 * {@link ContactEntity} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ContactEntityAssert extends AbstractAssert<ContactEntityAssert, ContactEntity> {

  /**
   * Creates a new <code>{@link ContactEntityAssert}</code> to make assertions on actual ContactEntity.
   * @param actual the ContactEntity we want to make assertions on.
   */
  public ContactEntityAssert(ContactEntity actual) {
    super(actual, ContactEntityAssert.class);
  }

  /**
   * An entry point for ContactEntityAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myContactEntity)</code> and get specific assertion with code completion.
   * @param actual the ContactEntity we want to make assertions on.
   * @return a new <code>{@link ContactEntityAssert}</code>
   */
  public static ContactEntityAssert assertThat(ContactEntity actual) {
    return new ContactEntityAssert(actual);
  }

  /**
   * Verifies that the actual ContactEntity's additionalNames is equal to the given one.
   * @param additionalNames the given additionalNames to compare the actual ContactEntity's additionalNames to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's additionalNames is not equal to the given one.
   */
  public ContactEntityAssert hasAdditionalNames(String additionalNames) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected additionalNames of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAdditionalNames = actual.getAdditionalNames();
    if (!Objects.areEqual(actualAdditionalNames, additionalNames)) {
      failWithMessage(assertjErrorMessage, actual, additionalNames, actualAdditionalNames);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's anniversary is equal to the given one.
   * @param anniversary the given anniversary to compare the actual ContactEntity's anniversary to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's anniversary is not equal to the given one.
   */
  public ContactEntityAssert hasAnniversary(Long anniversary) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected anniversary of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualAnniversary = actual.getAnniversary();
    if (!Objects.areEqual(actualAnniversary, anniversary)) {
      failWithMessage(assertjErrorMessage, actual, anniversary, actualAnniversary);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's contactAddresses contains the given ContactAddressEntity elements.
   * @param contactAddressEntities the given elements that should be contained in actual ContactEntity's contactAddresses.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's contactAddresses does not contain all given ContactAddressEntity elements.
   */
  public ContactEntityAssert hasContactAddressEntities(ContactAddressEntity... contactAddressEntities) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // check that given ContactAddressEntity varargs is not null.
    if (contactAddressEntities == null) throw new AssertionError("Expecting contactAddresses parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getContactAddresses(), contactAddressEntities);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity has no contactAddresses.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's contactAddresses is not empty.
   */
  public ContactEntityAssert hasNoContactAddressEntities() {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have contactAddresses but had :\n  <%s>";
    
    // check
    if (actual.getContactAddresses().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getContactAddresses());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ContactEntity's dateOfBirth is equal to the given one.
   * @param dateOfBirth the given dateOfBirth to compare the actual ContactEntity's dateOfBirth to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's dateOfBirth is not equal to the given one.
   */
  public ContactEntityAssert hasDateOfBirth(Long dateOfBirth) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected dateOfBirth of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualDateOfBirth = actual.getDateOfBirth();
    if (!Objects.areEqual(actualDateOfBirth, dateOfBirth)) {
      failWithMessage(assertjErrorMessage, actual, dateOfBirth, actualDateOfBirth);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's emails contains the given EMailAddress elements.
   * @param emails the given elements that should be contained in actual ContactEntity's emails.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's emails does not contain all given EMailAddress elements.
   */
  public ContactEntityAssert hasEmails(EMailAddress... emails) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // check that given EMailAddress varargs is not null.
    if (emails == null) throw new AssertionError("Expecting emails parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getEmails(), emails);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity has no emails.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's emails is not empty.
   */
  public ContactEntityAssert hasNoEmails() {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have emails but had :\n  <%s>";
    
    // check
    if (actual.getEmails().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getEmails());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ContactEntity's firstName is equal to the given one.
   * @param firstName the given firstName to compare the actual ContactEntity's firstName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's firstName is not equal to the given one.
   */
  public ContactEntityAssert hasFirstName(String firstName) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected firstName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFirstName = actual.getFirstName();
    if (!Objects.areEqual(actualFirstName, firstName)) {
      failWithMessage(assertjErrorMessage, actual, firstName, actualFirstName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's id is equal to the given one.
   * @param id the given id to compare the actual ContactEntity's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's id is not equal to the given one.
   */
  public ContactEntityAssert hasId(String id) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's internetIdentifiers contains the given InternetIdentifier elements.
   * @param internetIdentifiers the given elements that should be contained in actual ContactEntity's internetIdentifiers.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's internetIdentifiers does not contain all given InternetIdentifier elements.
   */
  public ContactEntityAssert hasInternetIdentifiers(InternetIdentifier... internetIdentifiers) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // check that given InternetIdentifier varargs is not null.
    if (internetIdentifiers == null) throw new AssertionError("Expecting internetIdentifiers parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getInternetIdentifiers(), internetIdentifiers);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity has no internetIdentifiers.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's internetIdentifiers is not empty.
   */
  public ContactEntityAssert hasNoInternetIdentifiers() {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have internetIdentifiers but had :\n  <%s>";
    
    // check
    if (actual.getInternetIdentifiers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getInternetIdentifiers());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ContactEntity's lastName is equal to the given one.
   * @param lastName the given lastName to compare the actual ContactEntity's lastName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's lastName is not equal to the given one.
   */
  public ContactEntityAssert hasLastName(String lastName) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected lastName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLastName = actual.getLastName();
    if (!Objects.areEqual(actualLastName, lastName)) {
      failWithMessage(assertjErrorMessage, actual, lastName, actualLastName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's notes is equal to the given one.
   * @param notes the given notes to compare the actual ContactEntity's notes to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's notes is not equal to the given one.
   */
  public ContactEntityAssert hasNotes(String notes) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected notes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNotes = actual.getNotes();
    if (!Objects.areEqual(actualNotes, notes)) {
      failWithMessage(assertjErrorMessage, actual, notes, actualNotes);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's organisation is equal to the given one.
   * @param organisation the given organisation to compare the actual ContactEntity's organisation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's organisation is not equal to the given one.
   */
  public ContactEntityAssert hasOrganisation(String organisation) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected organisation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualOrganisation = actual.getOrganisation();
    if (!Objects.areEqual(actualOrganisation, organisation)) {
      failWithMessage(assertjErrorMessage, actual, organisation, actualOrganisation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's phoneNumbers contains the given PhoneNumber elements.
   * @param phoneNumbers the given elements that should be contained in actual ContactEntity's phoneNumbers.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's phoneNumbers does not contain all given PhoneNumber elements.
   */
  public ContactEntityAssert hasPhoneNumbers(PhoneNumber... phoneNumbers) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // check that given PhoneNumber varargs is not null.
    if (phoneNumbers == null) throw new AssertionError("Expecting phoneNumbers parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPhoneNumbers(), phoneNumbers);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity has no phoneNumbers.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's phoneNumbers is not empty.
   */
  public ContactEntityAssert hasNoPhoneNumbers() {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have phoneNumbers but had :\n  <%s>";
    
    // check
    if (actual.getPhoneNumbers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPhoneNumbers());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ContactEntity's photos contains the given org.putput.files.PutPutFile elements.
   * @param photos the given elements that should be contained in actual ContactEntity's photos.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's photos does not contain all given org.putput.files.PutPutFile elements.
   */
  public ContactEntityAssert hasPhotos(PutPutImage... photos) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // check that given org.putput.files.PutPutFile varargs is not null.
    if (photos == null) throw new AssertionError("Expecting photos parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPhotos(), photos);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity has no photos.
   * @return this assertion object.
   * @throws AssertionError if the actual ContactEntity's photos is not empty.
   */
  public ContactEntityAssert hasNoPhotos() {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have photos but had :\n  <%s>";
    
    // check
    if (actual.getPhotos().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPhotos());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ContactEntity's salutation is equal to the given one.
   * @param salutation the given salutation to compare the actual ContactEntity's salutation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's salutation is not equal to the given one.
   */
  public ContactEntityAssert hasSalutation(String salutation) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected salutation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSalutation = actual.getSalutation();
    if (!Objects.areEqual(actualSalutation, salutation)) {
      failWithMessage(assertjErrorMessage, actual, salutation, actualSalutation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's user is equal to the given one.
   * @param user the given user to compare the actual ContactEntity's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's user is not equal to the given one.
   */
  public ContactEntityAssert hasUser(org.putput.users.UserEntity user) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.putput.users.UserEntity actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ContactEntity's version is equal to the given one.
   * @param version the given version to compare the actual ContactEntity's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContactEntity's version is not equal to the given one.
   */
  public ContactEntityAssert hasVersion(Long version) {
    // check that actual ContactEntity we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualVersion = actual.getVersion();
    if (!Objects.areEqual(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

}
